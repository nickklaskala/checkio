#!/usr/bin/env checkio --domain=py run open-labyrinth
def checkio(maze,y=1,x=1,hard_path=' '):
	soft_path=hard_path

	if x==10 and y==10:
		return soft_path.lstrip()

	maze[y][x]=1
	if maze[y][x+1]==0:
		soft_path=checkio(maze,y,x+1,hard_path+'E')
		if soft_path!='Dead':
			return soft_path
	if maze[y+1][x]==0:
		soft_path=checkio(maze,y+1,x,hard_path+'S')
		if soft_path!='Dead':
			return soft_path
	if maze[y][x-1]==0:
		soft_path=checkio(maze,y,x-1,hard_path+'W')
		if soft_path!='Dead':
			return soft_path
	if maze[y-1][x]==0:
		soft_path=checkio(maze,y-1,x,hard_path+'N')
		if soft_path!='Dead':
			return soft_path
	return 'Dead'



l=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,]
print(l)








if __name__ == '__main__':
	print("Example:")
	print(checkio([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				   [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				   [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
				   [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				   [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
				   [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
				   [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
				   [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
				   [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
				   [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
				   [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
				   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]))

	#This code using only for self-checking and not necessary for auto-testing
	def check_route(func, labyrinth):
		MOVE = {"S": (1, 0), "N": (-1, 0), "W": (0, -1), "E": (0, 1)}
		#copy maze
		route = func([row[:] for row in labyrinth])
		pos = (1, 1)
		goal = (10, 10)
		for i, d in enumerate(route):
			move = MOVE.get(d, None)
			if not move:
				print("Wrong symbol in route")
				return False
			pos = pos[0] + move[0], pos[1] + move[1]
			if pos == goal:
				return True
			if labyrinth[pos[0]][pos[1]] == 1:
				print("Player in the pit")
				return False
		print("Player did not reach exit")
		return False

	# These assert are using only for self-testing as examples.
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
		[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
		[1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
		[1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
		[1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
		[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "First maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Empty maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Up and down maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Dotted maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
		[1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1],
		[1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1],
		[1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
		[1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Need left maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1],
		[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1],
		[1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
		[1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "The big dead end."
	print("The local tests are done.")


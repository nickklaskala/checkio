def checkio(data, path="", x=1, y=1):
    if x == 10 and y == 10:
        return path
    
    data[x][y] = 1
    
    if data[x+1][y] == 0 and (len(path) == 0 or path[-1] != "N"):
        rt = checkio(data, path + "S", x+1, y)
        if rt != None:
            return rt
            
    if data[x][y+1] == 0 and (len(path) == 0 or path[-1] != "W"):
        rt = checkio(data, path + "E", x, y+1)
        if rt != None:
            return rt
            
    if data[x-1][y] == 0 and (len(path) == 0 or path[-1] != "S"):
        rt = checkio(data, path + "N", x-1, y)
        if rt != None:
            return rt
            
    if data[x][y-1] == 0 and (len(path) == 0 or path[-1] != "E"):
        rt = checkio(data, path + "W", x, y-1)
        if rt != None:
            return rt
    
    return None


maze=\
[
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
	[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
	[1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
	[1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
	[1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
	[1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
	[1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
	[1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
	[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
]


x=checkio(maze)
print('klaskala')
# print(x)






# '''

if __name__ == '__main__':
	print("Example:")
	print(checkio([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				   [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				   [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
				   [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
				   [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
				   [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
				   [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
				   [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
				   [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
				   [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
				   [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
				   [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]))

	#This code using only for self-checking and not necessary for auto-testing
	def check_route(func, labyrinth):
		MOVE = {"S": (1, 0), "N": (-1, 0), "W": (0, -1), "E": (0, 1)}
		#copy maze
		route = func([row[:] for row in labyrinth])
		pos = (1, 1)
		goal = (10, 10)
		for i, d in enumerate(route):
			move = MOVE.get(d, None)
			if not move:
				print("Wrong symbol in route")
				return False
			pos = pos[0] + move[0], pos[1] + move[1]
			if pos == goal:
				return True
			if labyrinth[pos[0]][pos[1]] == 1:
				print("Player in the pit")
				return False
		print("Player did not reach exit")
		return False

	# These assert are using only for self-testing as examples.
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
		[1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
		[1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
		[1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
		[1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
		[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "First maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Empty maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
		[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Up and down maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
		[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
		[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Dotted maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
		[1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1],
		[1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1],
		[1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
		[1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "Need left maze"
	assert check_route(checkio, [
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
		[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1],
		[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1],
		[1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],
		[1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]), "The big dead end."
	print("The local tests are done.")
# '''